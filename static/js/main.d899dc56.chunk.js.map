{"version":3,"sources":["Movie.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","movie","useState","imageUrl","setImageUrl","apiKey","baseUrl","a","fetch","response","json","data","images","secure_base_url","useEffect","getImageUrl","backgroundImageStyle","backgroundImage","backdrop_path","objectFit","className","style","src","poster_path","alt","media_type","original_title","name","release_date","original_language","overview","slice","width","height","display","vote_average","vote_count","App","query","setQuery","movies","setMovies","multiSearchEndpoint","nowPlayingEndpoint","popularEndpoint","event","preventDefault","results","console","log","id","onSubmit","htmlFor","type","onChange","target","value","placeholder","onClick","allMovies","filter","sort","b","popularity","map","length","sliceMovies","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d899dc56.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './Movie.css';\n\nfunction Movie({ movie }) {\n\n  const [imageUrl, setImageUrl] = useState('');\n\n  const apiKey = 'c325c6385fbc64f5360ebbd46b419ec4';\n  const baseUrl = 'https://api.themoviedb.org/3/';\n\n  async function getImageUrl() {\n      const response = await fetch(baseUrl + `configuration?api_key=${apiKey}`);\n      const data = await response.json();\n      setImageUrl(data.images.secure_base_url + 'w342');\n  }\n\n  useEffect(() => {\n    getImageUrl();\n  }, [])\n\n  const backgroundImageStyle = {\n    backgroundImage: `linear-gradient(to bottom right, rgba(1.57%, 8.63%, 14.51%, 1.00), rgba(1.57%, 8.63%, 14.51%, 0.84)), url(https://image.tmdb.org/t/p/w1280/${movie.backdrop_path})`,\n    objectFit: 'cover'\n  }\n\n  return (\n    <div className=\"movie-item\" style={backgroundImageStyle}>\n      <div className=\"image-container\">\n        <img className=\"movie-poster\" src={imageUrl + movie.poster_path} alt=\"movie poster\"></img>\n      </div>\n      <div className=\"info-container\">\n        <h1 className=\"movie-title\">{movie.media_type === 'movie' ? movie.original_title : (movie.media_type ? movie.name : movie.original_title)}</h1>\n        <p className=\"release-date\">{movie.release_date} (<span className=\"original_language\">{movie.original_language}</span>)</p>\n        <h3 className=\"overview-title\">Overview</h3>\n        <p className=\"overview\">{movie.overview.slice(0, 410)}...</p>\n        <p className=\"rating-title\"><strong>PMDB</strong> Rating</p>\n        <div className=\"rating\">\n          <img className=\"rating-image\" alt=\"rating-star\" src=\"https://cdn-icons-png.flaticon.com/512/143/143547.png\" width=\"28\" height=\"28\" style={{display: 'block'}}></img>\n          <div className=\"rating-stats\">\n            <p className=\"rating-value\">{movie.vote_average}/10</p>\n            <p className=\"rating-count\">{movie.vote_count}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Movie;\n","import React, { useState } from \"react\";\nimport './App.css';\nimport Movie from \"./Movie.js\";\n\nfunction App() {\n\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n\n  const apiKey = 'c325c6385fbc64f5360ebbd46b419ec4';\n  const baseUrl = 'https://api.themoviedb.org/3/';\n  const multiSearchEndpoint = 'search/multi';\n  const nowPlayingEndpoint = 'movie/now_playing';\n  const popularEndpoint = 'movie/top_rated';\n\n  async function getMovies(event) {\n    event.preventDefault();\n    if (!query) {\n      return\n    }\n    const response = await fetch(`${baseUrl}${multiSearchEndpoint}?api_key=${apiKey}&query=${query}`);\n    const data = await response.json();\n    setMovies(data.results);\n  }\n\n  async function getNowPlaying(event) {\n    event.preventDefault();\n    const response = await fetch(`${baseUrl}${nowPlayingEndpoint}?api_key=${apiKey}`);\n    const data = await response.json();\n    console.log(data)\n    setMovies(data.results);\n  }\n\n  async function getPopular(event) {\n    event.preventDefault();\n    const response = await fetch(`${baseUrl}${popularEndpoint}?api_key=${apiKey}`);\n    const data = await response.json();\n    setMovies(data.results);\n  }\n\n  function sliceMovies() {\n    if (!movies) {\n      return\n    }\n    const allMovies = movies.filter(movie => movie.poster_path).sort((a, b) => (a.popularity > b.popularity) ? -1 : ((b.popularity > a.popularity) ? 1 : 0)).map(movie => <Movie movie={movie} key={movie.id} />);\n    if (allMovies.length > 10) {\n      return allMovies.slice(0, 10)\n    } else {\n      return allMovies\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n          <div className=\"header-bar\">\n              <p>PMDB - The Poor Man's Movie Database</p>\n          </div>\n      </header>\n      <main>\n          <div id=\"search-section\">\n              <h1>Welcome.</h1>\n              <h3>Millions of movies and TV shows to discover. Explore now.</h3>\n              <form onSubmit={getMovies}>\n                  <label htmlFor=\"inputQuery\">\n                      <input type=\"text\" id=\"inputQuery\" name=\"inputQuery\" onChange={(event) => setQuery(event.target.value)} value={query} placeholder=\"i.e. The Dark Knight or Christopher Nolan\"></input>\n                  </label>\n                  <button type=\"submit\">Search</button>\n              </form>\n              <div className=\"trendy-buttons\">\n                <button className=\"now-playing-button\" type=\"submit\" onClick={getNowPlaying}>Now Playing</button>\n                <button className=\"popular-button\" type=\"submit\" onClick={getPopular}>Top Rated</button>\n              </div>\n          </div>\n          <div id=\"movies-list\">\n            {sliceMovies()}\n          </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}